- name: Verify infrastructure - hosts basic
  hosts: all
  gather_facts: yes
  become: yes

  vars:
    backend_ip: "192.168.56.121"
    lb_host: "192.168.56.124"

  tasks:
    - name: Check devops user exists
      ansible.builtin.shell: id devops
      register: devops_id
      ignore_errors: yes

    - name: Assert devops user exists
      ansible.builtin.assert:
        that:
          - devops_id.rc == 0
        fail_msg: "devops user missing on {{ inventory_hostname }}"

    - name: Check docker available
      ansible.builtin.shell: docker --version
      register: docker_ver
      failed_when: docker_ver.rc != 0
      changed_when: false

    - name: Check docker service is active
      ansible.builtin.shell: systemctl is-active docker
      register: docker_active
      failed_when: docker_active.rc != 0
      changed_when: false

    - name: Check netdata active (if installed)
      ansible.builtin.shell: systemctl is-active netdata || true
      register: netdata_active
      changed_when: false

- name: Verify app and frontend on specific hosts
  hosts: app:web:loadbalancer
  gather_facts: yes
  become: yes
  tasks:
    - name: Ensure backend container is running (on app)
      when: inventory_hostname in groups['app']
      ansible.builtin.shell: docker ps --filter "name=diagnostic_backend" --format "{{'{{.Status}}'}}"
      register: backend_status
      changed_when: false
      failed_when: "'Up' not in backend_status.stdout and backend_status.stdout != ''"

    - block:
      - name: Wait for backend to be healthy (local)
        ansible.builtin.uri:
          url: http://127.0.0.1:5000/metrics
          return_content: no
          status_code: 200
        register: backend_http
        until: backend_http.status == 200
        retries: 8
        delay: 3

      when: inventory_hostname in groups['app']

      rescue:
      - name: Fetch backend container logs for debugging
        ansible.builtin.shell: docker logs diagnostic_backend --tail 200
        register: backend_logs
        changed_when: false
        ignore_errors: true

      - name: Show tail of backend logs
        ansible.builtin.debug:
          var: backend_logs.stdout_lines

      - name: Fail test with helpful text
        ansible.builtin.fail:
          msg: "Backend health check failed on {{ inventory_hostname }} â€” see backend logs above"

    - name: Check frontend container exists and is running (web hosts)
      when: inventory_hostname in groups['web']
      ansible.builtin.shell: docker ps --filter "name=diagnostic_frontend" --format "{{'{{.Status}}'}}"
      register: frontend_status
      changed_when: false
      failed_when: "'Up' not in frontend_status.stdout and frontend_status.stdout != ''"

    - name: Wait for frontend to respond locally (web hosts)
      when: inventory_hostname in groups['web']
      ansible.builtin.uri:
        url: http://127.0.0.1:3000/
        return_content: no
        status_code: 200
      register: frontend_http
      until: frontend_http.status == 200
      retries: 8
      delay: 3

    - name: Check load balancer responds on port 80 (from loadbalancer)
      when: inventory_hostname in groups['loadbalancer']
      ansible.builtin.shell: "nginx -t && systemctl is-active nginx"
      register: nginx_ok
      failed_when: nginx_ok.rc != 0
      changed_when: false

- name: External checks from control node
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    lb_host: "192.168.56.124"
    backend_ip: "192.168.56.121"
  tasks:
    - name: Check LB HTTP from control node
      ansible.builtin.uri:
        url: http://{{ lb_host }}:80/
        return_content: no
        status_code: 200
      register: lb_check
      failed_when: lb_check.status != 200

    - name: Check backend via LB (through proxy)
      ansible.builtin.uri:
        url: http://{{ lb_host }}:80/
        return_content: yes
      register: lb_content
      changed_when: false

    - name: Report summary
      ansible.builtin.debug:
        msg: |
          LB HTTP status={{ lb_check.status }}, backend snippet length={{ lb_content.content | length }}