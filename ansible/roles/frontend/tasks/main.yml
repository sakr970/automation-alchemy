---
- name: Ensure frontend directory exists
  file:
    path: /opt/diagnostic_frontend
    state: directory
    owner: vagrant
    group: vagrant
    mode: '0755'

- name: Copy frontend source to remote
  become: false
  synchronize:
    src: "{{ playbook_dir }}/../docker/frontend/"
    dest: /opt/diagnostic_frontend/
    recursive: yes
    delete: no
    archive: no
    perms: no
    times: no
    owner: no
    group: no
  delegate_to: localhost

- name: Ensure ownership and permissions on frontend directory
  become: yes
  file:
    path: /opt/diagnostic_frontend
    owner: devops
    group: devops
    mode: '0755'
    recurse: yes

- name: Check for held apt packages
  become: yes
  command: apt-mark showhold
  register: held_packages
  changed_when: false
  failed_when: false

- name: Fail early if there are held packages blocking installs
  fail:
    msg: "There are held apt packages: {{ held_packages.stdout }}. Unhold them or investigate before continuing."
  when: held_packages.stdout != ""

- name: Check if 'containerd' or 'containerd.io' packages are installed
  become: yes
  shell: |
    dpkg -s containerd >/dev/null 2>&1 && echo containerd || true
    dpkg -s containerd.io >/dev/null 2>&1 && echo containerd.io || true
  register: containerd_check
  changed_when: false
  failed_when: false

- name: Remove conflicting packages 'containerd'/'containerd.io' if present
  become: yes
  apt:
    name: "{{ item }}"
    state: absent
    purge: yes
    autoremove: yes
  loop: "{{ containerd_check.stdout_lines }}"
  when: containerd_check.stdout != ""

- name: Check if 'containerd' package is installed
  become: yes
  command: dpkg -s containerd
  register: containerd_check
  failed_when: false
  changed_when: false

- name: Remove conflicting package 'containerd' if present
  become: yes
  apt:
    name: containerd
    state: absent
    purge: yes
    autoremove: yes
  when: containerd_check.rc == 0

- name: Ensure Docker engine and Python build deps are installed
  become: yes
  apt:
    name:
      - docker.io
      - python3-pip
      - build-essential
      - python3-dev
      - libffi-dev
      - libssl-dev
    state: present
    update_cache: yes

- name: Ensure docker service is running
  become: yes
  service:
    name: docker
    state: started
    enabled: yes

- name: Install Python Docker SDK (docker) via pip3
  become: yes
  pip:
    name: docker
    state: present
    executable: /usr/bin/pip3

- name: Verify Python Docker SDK is importable
  become: yes
  command: /usr/bin/python3 -c "import docker; print(docker.__version__)"
  register: docker_sdk_check
  changed_when: false
  failed_when: docker_sdk_check.rc != 0

- name: Fallback install python3-docker from apt if pip install failed
  become: yes
  apt:
    name: python3-docker
    state: present
  when: docker_sdk_check is failed

# Ensure any existing frontend container is removed so a rebuilt image can be started cleanly
- name: Remove existing frontend container if present
  become: yes
  community.docker.docker_container:
    name: diagnostic_frontend
    state: absent
    force_kill: true
    keep_volumes: false

# remove any existing image to force a full rebuild (ensures updated package.json is used)
- name: Remove existing frontend image if present
  become: yes
  community.docker.docker_image:
    name: diagnostic_frontend
    tag: latest
    state: absent

- name: Build frontend image on host
  become: yes
  community.docker.docker_image:
    source: build
    build:
      path: /opt/diagnostic_frontend/
      pull: yes
    name: diagnostic_frontend
    tag: latest

- name: Ensure frontend container is running
  become: yes
  community.docker.docker_container:
    name: diagnostic_frontend
    image: diagnostic_frontend:latest
    state: started
    restart_policy: always
    container_default_behavior: no_defaults
    published_ports:
      - "3000:3000"
    env:
      BACKEND_URL: "http://192.168.56.121:5000/metrics"

- name: Wait for frontend to respond on /
  become: yes
  ansible.builtin.uri:
    url: http://localhost:3000/
    return_content: no
    status_code: 200
  register: frontend_health
  retries: 10
  delay: 3
  until: frontend_health.status == 200